package med.infographic {	import com.greensock.easing.Quad;	import com.greensock.TweenMax;	import flash.display.BlendMode;	import flash.display.Graphics;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	public class ResetSlide extends Sprite implements ISlide {				static public const FADE_TIME:Number = 0.5;				protected var button:Sprite;		protected var finishedCallback:Function;				public function ResetSlide(slideData:InfographicSlideData, initialBackgroundColor:uint, finishedCallback:Function) {			this.finishedCallback = finishedCallback;						var xml:XML = slideData.xml;						var text:String = "Replay";			if (xml.hasOwnProperty("text")) text = TextUtils.safeText(xml.text.toString());									button = createResetButton(text);			addChild(button);		}				public static function createResetButton(text:String):Sprite {			var button:Sprite = new Sprite();						const ARROW_GAP:Number = 8;			const X_BORDER:Number = 15;			const Y_BORDER:Number = 10;			var prompt:MovieClip = new _ResetPrompt();			var textField:TextField = prompt.textField;			textField.wordWrap = false;			textField.autoSize = TextFieldAutoSize.CENTER;			textField.text = text + "\n ";			var arrow:Sprite = prompt.arrow;			var promptWidth:Number = (arrow.width + ARROW_GAP + textField.width);			var promptHeight:Number = Math.abs(textField.getBounds(prompt).top) * 2;			textField.x = promptWidth / 2 - textField.width;			arrow.x = -promptWidth / 2 + arrow.width / 2;						var g:Graphics = button.graphics;			g.beginFill(0xFFFFFF);			g.drawRect( -promptWidth / 2 - X_BORDER, -promptHeight / 2 - Y_BORDER, promptWidth + X_BORDER * 2, promptHeight + Y_BORDER * 2);			g.endFill();						prompt.blendMode = BlendMode.ERASE;			button.addChild(prompt);						button.blendMode = BlendMode.LAYER;									button.mouseChildren = false;									return button;		}				public function animateOn():void {			button.alpha = 0;			TweenMax.to(button, FADE_TIME, { alpha:1, ease:Quad.easeOut, onComplete:onFadedIn} );		}				protected function onFadedIn():void {			button.addEventListener(MouseEvent.MOUSE_DOWN, handleButtonDown, false, 0, true);		}				public function animateOff(callback:Function):void {			button.removeEventListener(MouseEvent.MOUSE_DOWN, handleButtonDown, false);						TweenMax.to(button, FADE_TIME, { alpha:0, ease:Quad.easeIn, onComplete:onFadedOut} );		}				protected function onFadedOut():void {			if (finishedCallback != null) finishedCallback(this);		}				public function animate(dTime:Number):void {					}				protected function handleButtonDown(event:MouseEvent):void {			animateOff(finishedCallback);		}			}}