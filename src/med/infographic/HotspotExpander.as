package med.infographic {	import com.greensock.easing.Linear;	import com.greensock.easing.Quad;	import com.greensock.plugins.ColorTransformPlugin;	import com.greensock.plugins.TweenPlugin;	import com.greensock.TweenMax;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Graphics;	import flash.display.Shape;	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	public class HotspotExpander extends _HotspotExpander {				public var expanded:Boolean;		public var canToggle:Boolean;				protected var boxRadius:Number;		protected var textWidth:Number;		protected var textHeight:Number;		protected var bitmapHeight:Number;				protected var bitmap:Bitmap;		protected var text:String;		protected var imageURL:String;				protected var textMask:Shape;		protected var bitmapMask:Shape;				public function HotspotExpander(text:String, imageURL:String) {			this.imageURL = imageURL;			this.text = text;			textField.visible = false;			textBG.visible = false;			boxRadius = 15;						const MARGIN:Number = 15;			const MIN_WIDTH:Number = 100;			const MAX_WIDTH:Number = 200;						var g:Graphics;			textWidth = MAX_WIDTH;			textHeight = 0;			if (text) {				textField.autoSize = TextFieldAutoSize.LEFT;				textField.multiline = false;				textField.wordWrap = false;				textField.text = text;				textField.width; // force refresh?				textField.multiline = true;				textField.wordWrap = true;				textField.width = Math.min(MAX_WIDTH, textField.width);				textField.width = Math.max(MIN_WIDTH, Math.min(textField.width, textField.textWidth + 4));				textWidth = textField.width + MARGIN * 2;				textHeight = textField.height + MARGIN * 2 - 5;				textField.x = textBG.x + MARGIN;				textField.y = textBG.y + MARGIN - 5;				textBG.width = textWidth;				textBG.height = textHeight;								textMask = new Shape();				g = textMask.graphics;				g.beginFill(0xFFFFFF);				g.drawRect(textField.x, textField.y, textField.width, textField.height);				g.endFill();				textMask.visible = false;				addChild(textMask);				textField.mask = textMask;			}						if (imageURL) {				var bmd:BitmapData = AssetManager.getImage(imageURL);				bitmap = new Bitmap(bmd, "auto", true);				bitmap.width = textWidth;				bitmap.scaleY = bitmap.scaleX;				bitmapHeight = bitmap.height;				addChild(bitmap);				bitmap.visible = false;				bitmap.x = textBG.x;								bitmapMask = new Shape();				g = bitmapMask.graphics;				g.beginFill(0xFFFFFF);				g.drawRect(bitmap.x, -boxRadius + textHeight, bitmap.width, bitmap.height);				g.endFill();				bitmapMask.visible = false;				addChild(bitmapMask);				bitmap.mask = bitmapMask;			}									mouseChildren = false;						expanded = false;			canToggle = true;		}						public function toggle():void {			expanded = !expanded;			canToggle = false;						var t:Number = 0;			const BUTTON_CHANGE_TIME:Number = 0.5;						const BUTTON_OVERLAP:Number = 0.2;			const EXPAND_HORIZONTAL_TIME:Number = 0.3;			const DIRECTION_DELAY:Number = 0.05;			const EXPAND_VERTICAL_TIME:Number = 0.2;			const EXPAND_CONTENT_TIME:Number = 0.5;			var right:Boolean = true;			var down:Boolean = true;									if (expanded) {				t = 0;				TweenMax.to(bg, BUTTON_CHANGE_TIME, { delay:t, colorTransform:{ tint:0x76b82a, tintAmount:1.0 }, ease:Quad.easeOut } );				TweenMax.to(verticalLine, BUTTON_CHANGE_TIME, { delay:t, scaleY:0, alpha:0, ease:Quad.easeOut } );				TweenMax.to(horizontalLine, BUTTON_CHANGE_TIME, { delay:t, scaleX:1.1, scaleY:1.1, colorTransform: { tint:0xFFFFFF, tintAmount:1.0 }, ease:Quad.easeOut } );				t += BUTTON_CHANGE_TIME - BUTTON_OVERLAP;								TweenMax.fromTo(textBG, EXPAND_HORIZONTAL_TIME, { width:0, height:(boxRadius * 2), visible:true }, { delay:t, width:textWidth, ease:Quad.easeOut } );								t += EXPAND_HORIZONTAL_TIME;								if (textHeight > 0) {					TweenMax.to(textBG, EXPAND_VERTICAL_TIME, { delay:t, height:textHeight, ease:Quad.easeIn } );					t += EXPAND_VERTICAL_TIME + DIRECTION_DELAY;				}								if (bitmap) TweenMax.fromTo(bitmap, EXPAND_CONTENT_TIME, { y:(-boxRadius + textHeight - bitmap.height), visible:true }, { delay:t, y:(-boxRadius + textHeight), ease:Quad.easeOut } );				if (text) TweenMax.fromTo(textField, EXPAND_CONTENT_TIME, { y:(textMask.y + textHeight), visible:true }, { delay:t, y:textMask.y, ease:Quad.easeOut } );												// Dummy to trigger callback				TweenMax.to(textBG, EXPAND_CONTENT_TIME, { delay:t, onComplete:onExpandingFinished } );															} else {								t = 0;								if (bitmap) TweenMax.to(bitmap, EXPAND_CONTENT_TIME, { delay:t,  y:(-boxRadius + textHeight - bitmap.height), ease:Quad.easeIn } );				if (text) TweenMax.to(textField, EXPAND_CONTENT_TIME, { delay:t, y:(textMask.y + textHeight), ease:Quad.easeIn } );								t += EXPAND_CONTENT_TIME;				if (textHeight > 0) {					TweenMax.to(textBG, EXPAND_VERTICAL_TIME, { delay:t, height:(boxRadius * 2), ease:Quad.easeOut } );					t += EXPAND_VERTICAL_TIME + DIRECTION_DELAY;				}				TweenMax.to(textBG, EXPAND_HORIZONTAL_TIME, { delay:t, width:0, ease:Quad.easeIn } );								t += EXPAND_HORIZONTAL_TIME - BUTTON_OVERLAP;								TweenMax.to(bg, BUTTON_CHANGE_TIME, { delay:t, colorTransform:{ tint:0xFFFFFF, tintAmount:0 }, ease:Quad.easeOut } );				TweenMax.to(verticalLine, BUTTON_CHANGE_TIME, {delay:t, scaleY:1, alpha:1, ease:Quad.easeOut } );				TweenMax.to(horizontalLine, BUTTON_CHANGE_TIME, { delay:t, scaleX:1, scaleY:1, colorTransform: { tint:0x76b82a, tintAmount:0 }, ease:Quad.easeOut } );												// Dummy to trigger callback				TweenMax.to(textBG, BUTTON_CHANGE_TIME, { delay:t, onComplete:onExpandingFinished } );											}		}				protected function onExpandingFinished():void {			canToggle = true;		}			}}