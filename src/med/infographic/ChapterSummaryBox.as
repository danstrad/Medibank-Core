package med.infographic {	import flash.display.Shape;	import flash.geom.Point;	public class ChapterSummaryBox extends Shape {				public static const SIZE:Number = 100;				protected var _time:Number;		protected var _previousTime:Number;		protected var _carryOverTime:Number;				public var startTime:Number;		public var endTime:Number;				public var start:Point;				public var source:String;		public var targetScale:Number;				public var targetRotation:Number;				public var targetAlpha:Number;				public var destination:Point;				public var dx:Number;		public var dy:Number;				public function ChapterSummaryBox() {			_time = 0;			_previousTime = 0;			_carryOverTime = 0;						dx = 0;			dy = 0;						graphics.beginFill(0xFFFFFF);			graphics.drawRect( -SIZE / 2, -SIZE / 2, SIZE, SIZE);			graphics.endFill();		}						public function set floatingTime(value:Number):void {			_previousTime = _time;			_time = value;			var dTime:Number = _time - _previousTime;			_carryOverTime += dTime;						if (_time < startTime) return;			if (_previousTime <= startTime) {				_carryOverTime = 0;				x = start.x;				y = start.y;				visible = true;			}						const PROGRESS_TICK:Number = 30;			const GRAVITY:Number = 0.07;			const MOVE_MULTIPLIER:Number = 6;						var ticks:int = 0;			while (_carryOverTime - PROGRESS_TICK >= 0) {				_carryOverTime -= PROGRESS_TICK;								ticks++;								x += dx * MOVE_MULTIPLIER;				y += dy * MOVE_MULTIPLIER;				dy += GRAVITY;			}			// Sync this up with ticks. Or get rid of ticks			var f:Number = (_time - startTime) / (endTime - startTime);			var eased:Number = Utils.easeOut(f);			scaleX = scaleY = Math.max(0, Math.min(1, f * targetScale));			rotation = f * targetRotation;					}				public function set sproutingTime(value:Number):void {			_previousTime = _time;			_time = value;			var dTime:Number = _time - _previousTime;			_carryOverTime += dTime;			if (_time < startTime) return;			if (_previousTime <= startTime) {				_carryOverTime = 0;				x = start.x;				y = start.y;				visible = true;			}						var f:Number = Math.max(0, Math.min(1, (_time - startTime) / (endTime - startTime)));			var eased:Number = Utils.easeOut(f);						alpha = eased * targetAlpha;			scaleX = scaleY = eased * targetScale;						var targetRad:Number = SIZE * targetScale / 2;			if (source.charAt(0) == "t") y = start.y - targetRad + height / 2;			else y = start.y + targetRad - height / 2;			if (source.charAt(1) == "l") x = start.x - targetRad + width / 2;			else x = start.x + targetRad - width / 2;					}				public function set slidingTime(value:Number):void {			_previousTime = _time;			_time = value;			var dTime:Number = _time - _previousTime;			_carryOverTime += dTime;						if (_time < startTime) return;			if (_previousTime <= startTime) {				_carryOverTime = 0;				x = start.x;				y = start.y;				visible = true;			}						var f:Number = Math.max(0, Math.min(1, (_time - startTime) / (endTime - startTime)));			var eased:Number = Utils.easeOut(f);						scaleX = eased * targetScale;			var targetRad:Number = SIZE * targetScale / 2;			if (source == "l") x = start.x + (eased - 1) * targetRad;			else x = start.x - (eased - 1) * targetRad;					}			}}