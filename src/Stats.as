package  {	import flash.events.Event;	import flash.globalization.DateTimeStyle;	import flash.net.FileReference;	import flash.net.SharedObject;	import med.display.Box;	import med.display.CoreInfographic;	import med.display.HomeBox;	import med.infographic.Infographic;	import med.infographic.InfographicData;	import med.story.Story;	public class Stats {				public static const TRACK_STATS:Boolean = true;				protected static const LINE_BREAK:String = "\r\n";		protected static const TAB:String = "\t";				protected static var saveFile:FileReference;				protected static const sharedObject:SharedObject = createSharedObject();		protected static function createSharedObject():SharedObject {			if (!TRACK_STATS) return null;			var so:SharedObject = SharedObject.getLocal("Stats");			current = so.data.current;			if (!current) current = so.data.current = new Object();			allTime = so.data.allTime;			if (!allTime) {				allTime = so.data.allTime = new Object();				var date:Date = new Date();				so.data.lastPrint = date.time;			}			so.flush();			return so;		}		protected static var current:Object;		protected static var allTime:Object;				// chapter, type, id, title				static public function homeBoxClicked(homeBox:HomeBox):void {			if (!TRACK_STATS) return;			if (homeBox.chapter) {				var chapterID:int = homeBox.chapter.id;				var type:String = "Chapter";				var id:String = "" + chapterID;				var title:String = homeBox.chapter.title;				increment(chapterID, type, id, title);			} else {				// Unknown			}		}				static public function boxClicked(box:Box):void {			if (!TRACK_STATS) return;			if (box.chapter) {				var chapterID:int = box.chapter.id;				var story:Story = box.contentInfo.linkedStory;				var infographic:InfographicData = box.contentInfo.linkedInfographic;				var type:String;				var id:String;				var title:String;				if (story) {					type = "Story"					id = box.contentInfo.linkedStoryID;					title = box.contentInfo.text;					increment(chapterID, type, id, title);				} else if (infographic) {					type = "Infographic";					id = box.contentInfo.linkedInfographicID;					title = box.contentInfo.text;					increment(chapterID, type, id, title);				} else {					// Unknown				}			} else {				// Unknown			}		}				static public function abortedInfographic(infographic:CoreInfographic):void {			if (!TRACK_STATS) return;					}				static public function finishedInfographic(infographic:CoreInfographic):void {			if (!TRACK_STATS) return;					}						static protected function increment(chapterID:int, type:String, id:String, title:String):void {			//trace("Chapter:" + chapterID, "Type:" + type, "ID:" + id, "Title:" + title);			var hash:String = "" + chapterID + type + id + title;			var o:Object;			o = current[hash];			if (o) o.count++;			else o = current[hash] = { chapterID:chapterID, type:type, id:id, title:title, count:1 }			o = allTime[hash];			if (o) o.count++;			else o = allTime[hash] = { chapterID:chapterID, type:type, id:id, title:title, count:1 }						sharedObject.flush();		}				static public function print():void {			if (!TRACK_STATS) return;			var date:Date = new Date();			date.time = sharedObject.data.lastPrint;						var s:String = "Since last output, " + date + ":" + LINE_BREAK + LINE_BREAK;			s += printFrom(current) || "None";			s += LINE_BREAK + LINE_BREAK + "All time:" + LINE_BREAK + LINE_BREAK;			s += printFrom(allTime) || "None";			s += LINE_BREAK;						saveFile = new FileReference();			saveFile.addEventListener(Event.COMPLETE, handlePrintComplete, false, 0, true);			saveFile.addEventListener(Event.CANCEL, handlePrintCancel, false, 0, true);			saveFile.save(s, "Stats.txt");					}		static protected function clearCurrent():void {			var date:Date = new Date();			sharedObject.data.lastPrint = date.time;			sharedObject.data.current = current = new Object();			sharedObject.flush();		}				static protected function handlePrintComplete(event:Event):void {			saveFile.removeEventListener(Event.COMPLETE, handlePrintComplete, false);			saveFile.removeEventListener(Event.CANCEL, handlePrintCancel, false);			clearCurrent();		}				static protected function handlePrintCancel(event:Event):void {			saveFile.removeEventListener(Event.COMPLETE, handlePrintComplete, false);			saveFile.removeEventListener(Event.CANCEL, handlePrintCancel, false);		}				static protected function printFrom(source:Object):String {			var chapters:Array = [];			var stories:Array = [];			var infographics:Array = [];			for each(var o:Object in source) {				switch(o.type) {					case "Chapter": chapters.push(o); break;					case "Story": stories.push(o); break;					case "Infographic": infographics.push(o); break;				}			}			chapters.sort(reverseOrderByID);			stories.sort(reverseOrderByID);			infographics.sort(reverseOrderByID);						var s:String = "";						var i:int;			var chapterID:int = 0;			while ((chapters.length > 0) || (stories.length > 0) || (infographics.length > 0)) {				for (i = chapters.length - 1; i >= 0; i--) {					o = chapters[i];					if (o.chapterID == chapterID) {						chapters.splice(i, 1);						if (s.length > 0) s += LINE_BREAK;						s += printChapter(o) + LINE_BREAK;					}				}								for (i = stories.length - 1; i >= 0; i--) {					o = stories[i];					if (o.chapterID == chapterID) {						stories.splice(i, 1);						s += printStory(o) + LINE_BREAK;					}				}								for (i = infographics.length - 1; i >= 0; i--) {					o = infographics[i];					if (o.chapterID == chapterID) {						infographics.splice(i, 1);						s += printInfographic(o) + LINE_BREAK;					}				}								chapterID++;				if (chapterID > 5) break;			}						return s;		}						static protected function printChapter(o:Object):String {			return "" + o.count + TAB + "Chapter " + o.id + ": " + o.title;		}		static protected function printStory(o:Object):String {			return "" + o.count + TAB + "Story " + o.id + ": " + o.title;		}		static protected function printInfographic(o:Object):String {			return "" + o.count + TAB + "Infographic " + o.id + ": " + o.title;		}						static protected function reverseOrderByID(a:Object, b:Object):int { return -a.id.localeCompare(b.id); }			}}